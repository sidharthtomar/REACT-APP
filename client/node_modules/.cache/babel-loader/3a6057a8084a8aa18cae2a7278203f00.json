{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL } from './types';\nimport setAuthToken from '../utils/setAuthToken';\nimport { setAlert } from './alert'; //LOAD USer\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //regsiter User\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post('/api/users', body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; //Login User\n\nexport const login = _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post('/api/auth', body, config);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(errors => {\n          dispatch(setAlert(error.msg, 'danger'));\n        });\n      }\n\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    }\n  };\n};","map":{"version":3,"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","setAuthToken","setAlert","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","login","errors","response","forEach","error","msg"],"sources":["C:/Users/tomar/OneDrive/Desktop/SequelizeDemo/client/src/actions/auth.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nimport{\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL\r\n} from './types';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport { setAlert } from './alert';\r\n\r\n\r\n\r\n\r\n//LOAD USer\r\n\r\nexport const loadUser =() => async dispatch=>{\r\n    if(localStorage.token){\r\n        setAuthToken(localStorage.token);\r\n\r\n    }\r\n    try{\r\n        const res = await axios.get('/api/auth');\r\n        dispatch({\r\n            type:USER_LOADED,\r\n            payload:res.data\r\n        })\r\n\r\n    }catch(err){\r\n        dispatch({\r\n            type:AUTH_ERROR\r\n        })\r\n\r\n    }\r\n}\r\n\r\n//regsiter User\r\n\r\nexport const register = ({name,email,password})=> async dispatch=>{\r\n    const config = {\r\n        headers:{\r\n            'Content-Type':'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({name,email,password});\r\n\r\n    try{\r\n        const res = await axios.post('/api/users',body,config);\r\n\r\n\r\n        dispatch({\r\n            type:REGISTER_SUCCESS,\r\n            payload:res.data\r\n        });\r\n    }catch(err){\r\n        dispatch({\r\n            type:REGISTER_FAIL\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\n//Login User\r\n\r\nexport const login = ({email,password})=> async dispatch=>{\r\n    const config = {\r\n        headers:{\r\n            'Content-Type':'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({email,password});\r\n\r\n    try{\r\n        const res = await axios.post('/api/auth',body,config);\r\n\r\n\r\n        dispatch({\r\n            type:LOGIN_SUCCESS,\r\n            payload:res.data\r\n        });\r\n    }catch(err){\r\n        const errors = err.response.data.errors;\r\n        if(errors){\r\n            errors.forEach(errors => {\r\n                dispatch(setAlert(error.msg,'danger'))\r\n                \r\n            });\r\n        }\r\n        dispatch({\r\n            type:LOGIN_FAIL\r\n        });\r\n\r\n    }\r\n}\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,gBADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,UAJJ,EAKIC,aALJ,EAMIC,UANJ,QAOO,SAPP;AAQA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAASC,QAAT,QAAyB,SAAzB,C,CAKA;;AAEA,OAAO,MAAMC,QAAQ,GAAE,MAAM,MAAMC,QAAN,IAAgB;EACzC,IAAGC,YAAY,CAACC,KAAhB,EAAsB;IAClBL,YAAY,CAACI,YAAY,CAACC,KAAd,CAAZ;EAEH;;EACD,IAAG;IACC,MAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,WAAV,CAAlB;IACAJ,QAAQ,CAAC;MACLK,IAAI,EAACZ,WADA;MAELa,OAAO,EAACH,GAAG,CAACI;IAFP,CAAD,CAAR;EAKH,CAPD,CAOC,OAAMC,GAAN,EAAU;IACPR,QAAQ,CAAC;MACLK,IAAI,EAACX;IADA,CAAD,CAAR;EAIH;AACJ,CAlBM,C,CAoBP;;AAEA,OAAO,MAAMe,QAAQ,GAAG;EAAA,IAAC;IAACC,IAAD;IAAMC,KAAN;IAAYC;EAAZ,CAAD;EAAA,OAA0B,MAAMZ,QAAN,IAAgB;IAC9D,MAAMa,MAAM,GAAG;MACXC,OAAO,EAAC;QACJ,gBAAe;MADX;IADG,CAAf;IAKA,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;MAACP,IAAD;MAAMC,KAAN;MAAYC;IAAZ,CAAf,CAAb;;IAEA,IAAG;MACC,MAAMT,GAAG,GAAG,MAAMb,KAAK,CAAC4B,IAAN,CAAW,YAAX,EAAwBH,IAAxB,EAA6BF,MAA7B,CAAlB;MAGAb,QAAQ,CAAC;QACLK,IAAI,EAACd,gBADA;QAELe,OAAO,EAACH,GAAG,CAACI;MAFP,CAAD,CAAR;IAIH,CARD,CAQC,OAAMC,GAAN,EAAU;MACPR,QAAQ,CAAC;QACLK,IAAI,EAACb;MADA,CAAD,CAAR;IAIH;EACJ,CAtBuB;AAAA,CAAjB,C,CAyBP;;AAEA,OAAO,MAAM2B,KAAK,GAAG;EAAA,IAAC;IAACR,KAAD;IAAOC;EAAP,CAAD;EAAA,OAAqB,MAAMZ,QAAN,IAAgB;IACtD,MAAMa,MAAM,GAAG;MACXC,OAAO,EAAC;QACJ,gBAAe;MADX;IADG,CAAf;IAKA,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;MAACN,KAAD;MAAOC;IAAP,CAAf,CAAb;;IAEA,IAAG;MACC,MAAMT,GAAG,GAAG,MAAMb,KAAK,CAAC4B,IAAN,CAAW,WAAX,EAAuBH,IAAvB,EAA4BF,MAA5B,CAAlB;MAGAb,QAAQ,CAAC;QACLK,IAAI,EAACV,aADA;QAELW,OAAO,EAACH,GAAG,CAACI;MAFP,CAAD,CAAR;IAIH,CARD,CAQC,OAAMC,GAAN,EAAU;MACP,MAAMY,MAAM,GAAGZ,GAAG,CAACa,QAAJ,CAAad,IAAb,CAAkBa,MAAjC;;MACA,IAAGA,MAAH,EAAU;QACNA,MAAM,CAACE,OAAP,CAAeF,MAAM,IAAI;UACrBpB,QAAQ,CAACF,QAAQ,CAACyB,KAAK,CAACC,GAAP,EAAW,QAAX,CAAT,CAAR;QAEH,CAHD;MAIH;;MACDxB,QAAQ,CAAC;QACLK,IAAI,EAACT;MADA,CAAD,CAAR;IAIH;EACJ,CA7BoB;AAAA,CAAd"},"metadata":{},"sourceType":"module"}